#logistic_regression

#predicting_numbers_in_image_with_logistic_regression

#importing libraries

import numpy as np #for numerical calculation
import seaborn as sns #sns is for heat map lib
import matplotlib.pyplot as plt #plot a graph
from sklearn.datasets import load_digits  #to load the digits from 0 to 9
from sklearn.model_selection import train_test_split # to split the given data/ input data
from sklearn.linear_model import LogisticRegression #to import the logistic regression from sklearn main lib
from sklearn.metrics import confusion_matrix # conf matrix importing from sk
from sklearn import metrics #to display
#sets the backend of matplotlib to the inline backend
%matplotlib inline


digits = load_digits() # load all the digits from sk data sets


print('Image Data shape',digits.data.shape)
print('Label Data shape',digits.target.shape)

 

plt.figure(figsize=(20,4))
for index,(image,label) in enumerate(zip(digits.data[0:5],digits.target[0:5])):
    plt.subplot(1,5,index + 1)
    plt.imshow(np.reshape(image,(8,8)),cmap=plt.cm.gray)
    plt.title('training : %i\n' %label,fontsize=20) 

X_train,X_test,y_train,y_test = train_test_split(digits.data,digits.target,test_size=0.25,random_state=2)
#random_state  value will guarantee that same sequence of random numbers are generated each time you run the code.
# test size 0.25 will split 25% as the test data


log_reg = LogisticRegression()
log_reg.fit(X_train,y_train)



print(log_reg.predict(X_test[0].reshape(1,-1)))


print(log_reg.predict(X_test[0:10]))


preds = log_reg.predict(X_test)


score = log_reg.score(X_test,y_test)
print(score)

cm = confusion_matrix(y_test,preds)
print(cm)

plt.figure(figsize=(9,9))
sns.heatmap(cm,annot=True,fmt=".3f",linewidth=0.5,square = True,cmap = 'Blues_r')
plt.ylabel('Actual label')
plt.xlabel('Predicted label')
all_sample_title='Accuracy Score : {0}'.format(score)
plt.title(all_sample_title,size=15)



index = 0
classifiedIndex = []
for predict,actual in zip(preds,y_test):
    if predict==actual: #its logic set up pridict=actual then output prints
        classifiedIndex.append(index)
    index +=1 # incrementing the next values
plt.figure(figsize=(20,3))
for plotIndex,wrong in enumerate(classifiedIndex[0:4]):
    plt.subplot(1,4,plotIndex +1)
    plt.imshow(np.reshape(X_test[wrong],(8,8)),cmap=plt.cm.gray)
    plt.title('Predicted: {}, Actual: {}'.format(preds[wrong],y_test[wrong]),fontsize=20)
